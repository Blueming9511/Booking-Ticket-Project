package com.cibook.bookingticket.service;

import com.cibook.bookingticket.model.Cinema;
import com.cibook.bookingticket.model.Cinema.CinemaStatus;
import com.cibook.bookingticket.repository.CinemaRepository;

import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageImpl;
import org.springframework.data.domain.Pageable;
import org.springframework.data.mongodb.core.MongoTemplate;
import org.springframework.data.mongodb.core.query.Criteria;
import org.springframework.data.mongodb.core.query.Query;
import org.springframework.stereotype.Service;
import org.webjars.NotFoundException;

import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.stream.Collectors;

@Slf4j
@Service
public class CinemaService implements IService<Cinema, String> {
    private final CinemaRepository cinemaRepository;
    private final AutoGeneratedCode codeGenerator;
    private final MongoTemplate mongoTemplate;

    @Autowired
    public CinemaService(CinemaRepository cinemaRepository, AutoGeneratedCode codeGenerator, MongoTemplate mongoTemplate) {
        this.cinemaRepository = cinemaRepository;
        this.codeGenerator = codeGenerator;
        this.mongoTemplate = mongoTemplate;
    }

    @Override
    public Cinema add(Cinema entity) {
        log.info("CinemaService add cinema");
        entity.setCinemaCode(codeGenerator.generateCinemaCode());
        return cinemaRepository.save(entity);
    }

    @Override
    public Optional<Cinema> findById(String id) {
        return cinemaRepository.findById(id);
    }

    @Override
    public Optional<Cinema> findByCode(String id) {
        return cinemaRepository.findByCinemaCode(id);
    }

    @Override
    public List<Cinema> findAll() {
        return cinemaRepository.findAll();
    }

    @Override
    public Page<Cinema> findAll(Pageable pageable) {
        return cinemaRepository.findAll(pageable);
    }

    public Page<Cinema> findAllWithOwner(Pageable pageable, String owner, String address, String status) {
        Query query = new Query();
        if (owner != null && !owner.trim().isEmpty()) {
            query.addCriteria(Criteria.where("owner").regex(owner, "i"));
        }
        if (address != null && !address.trim().isEmpty()) {
            query.addCriteria(Criteria.where("location").regex(".*" + address + ".*", "i"));
        }
        if (status != null && !status.trim().isEmpty()) {
            query.addCriteria(Criteria.where("status").is(status));
        }
        query.with(pageable);
        List<Cinema> results = mongoTemplate.find(query, Cinema.class);
        long count = mongoTemplate.count(query.skip(-1).limit(-1), Cinema.class);
        return new PageImpl<>(results, pageable, count);
    }

    @Override
    public Map<String, String> findAllNamesWithID() {
        return cinemaRepository.findAll().stream()
                .collect(Collectors.toMap(
                        Cinema::getCinemaCode,
                        Cinema::getCinemaName,
                        (existing, replacement) -> existing));
    }

    @Override
    public Cinema update(String id, Cinema entity) {
        if (!existsById(id))
            return null;
        return cinemaRepository.findById(id)
                .map(existing -> {
                    entity.setId(existing.getId());
                    entity.setCinemaCode(existing.getCinemaCode());
                    return cinemaRepository.save(entity);
                })
                .orElse(null);
    }

    @Override
    public void deleteById(String id) {
        cinemaRepository.deleteById(id);
    }

    @Override
    public boolean existsById(String id) {
        return cinemaRepository.existsById(id);
    }

    public void updateStatus(String id, String entity) {
        Cinema cinema = cinemaRepository.findById(id)
                .orElseThrow(() -> new NotFoundException("Cinema not found with ID: " + id));
        cinema.setStatus(CinemaStatus.valueOf(entity));
        cinemaRepository.save(cinema);
    }
}
