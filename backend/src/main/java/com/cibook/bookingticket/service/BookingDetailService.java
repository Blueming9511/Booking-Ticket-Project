package com.cibook.bookingticket.service;

import com.cibook.bookingticket.model.BookingDetail;
import com.cibook.bookingticket.model.User;
import com.cibook.bookingticket.repository.BookingDetailRepository;
import com.cibook.bookingticket.repository.BookingRepository;
import com.cibook.bookingticket.repository.UserRepository;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.security.authentication.BadCredentialsException;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.*;
import java.util.stream.Collectors;

@Slf4j
@Service
public class BookingDetailService implements IService<BookingDetail, String> {

    private final BookingDetailRepository bookingDetailRepository;
    private final BookingRepository bookingRepository;
    private final AutoGeneratedCode autoGeneratedCode;

    @Autowired
    public BookingDetailService(BookingDetailRepository bookingDetailRepository, BookingRepository bookingRepository, AutoGeneratedCode autoGeneratedCode) {
        this.bookingDetailRepository = bookingDetailRepository;
        this.bookingRepository = bookingRepository;
        this.autoGeneratedCode = autoGeneratedCode;
    }

    @Override
    public BookingDetail add(BookingDetail entity) {
        return bookingDetailRepository.save(entity);
    }

    @Override
    public Optional<BookingDetail> findById(String bookingId) {
        return bookingDetailRepository.findById(bookingId);
    }

    @Override
    public Optional<BookingDetail> findByCode(String code) {
        return null;
    }

    @Override
    public List<BookingDetail> findAll() {
        return bookingDetailRepository.findAll();
    }

    @Override
    public Page<BookingDetail> findAll(Pageable pageable) {
        return bookingDetailRepository.findAll(pageable);
    }

    @Override
    public Map<String, String> findAllNamesWithID() {
        return null;
    }

    @Override
    public BookingDetail update(String id, BookingDetail entity) {
        return bookingDetailRepository.findById(id).map(existing -> {
            entity.setId(existing.getId());
            return bookingDetailRepository.save(entity);
        }).orElseThrow(() -> new NoSuchElementException("BookingDetail not found with ID: " + id));
    }

    @Override
    public void deleteById(String id) {
        if (bookingDetailRepository.existsById(id)) {
            bookingDetailRepository.deleteById(id);
        } else {
            throw new NoSuchElementException("BookingDetail not found with ID: " + id);
        }
    }

    @Override
    public boolean existsById(String id) {
        return bookingDetailRepository.existsById(id);
    }

    public void deleteAll() {
        bookingDetailRepository.deleteAll();
    }

}