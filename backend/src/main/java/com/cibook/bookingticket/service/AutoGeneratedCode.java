package com.cibook.bookingticket.service;

import com.cibook.bookingticket.model.SequenceCounter;
import com.cibook.bookingticket.repository.SequenceCounterRepository;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

@Service
public class AutoGeneratedCode {
    private static final int MAX_SEQUENCE = 999;
    private static final int SEAT_ROWS = 10;
    private static final int SEATS_PER_ROW = 10;

    private final SequenceCounterRepository sequenceRepo;

    public AutoGeneratedCode(SequenceCounterRepository sequenceRepo) {
        this.sequenceRepo = sequenceRepo;
    }

    @Transactional
    public String generateBookingCode() {
        return generateUniqueCode("BOOK", 3);
    }

    @Transactional
    public String generateCinemaCode() {
        return generateUniqueCode("CIN", 3);
    }

    @Transactional
    public String generateMovieCode() {
        return generateUniqueCode("MOV", 3);
    }

    @Transactional
    public String generateCouponCode() {
        return generateUniqueCode("COUP", 3);
    }

    @Transactional
    public String generateShowtimeCode() {
        return generateUniqueCode("SHOW", 3);
    }

    @Transactional
    public String generatePaymentCode() {
        return generateUniqueCode("PAY", 3);
    }

    @Transactional
    public String generateScreenCode(String cinemaCode) {
        String key = "SCR" + cinemaCode;
        SequenceCounter sequence = sequenceRepo.findById(key)
                .orElseGet(() -> {
                    SequenceCounter newSeq = new SequenceCounter();
                    newSeq.setKey(key);
                    newSeq.setValue(0);
                    return sequenceRepo.save(newSeq);
                });

        int nextValue = sequence.getValue() + 1;
        sequence.setValue(nextValue);
        sequenceRepo.save(sequence);

        return String.format("SCR%03d", nextValue);
    }

    @Transactional
    public String generateSeatCode(String screenCode, String cinemaCode, String rowSeat) {
        String key = "SE" + screenCode + cinemaCode + rowSeat;
        SequenceCounter sequence = sequenceRepo.findById(key)
                .orElse(new SequenceCounter(key, 0));

        int seq = sequence.getValue() + 1;
        sequence.setValue(seq);
        sequenceRepo.save(sequence);

        char row = (char) (rowSeat.charAt(0) + (seq - 1) / SEATS_PER_ROW);
        int number = (seq % SEATS_PER_ROW == 0) ? SEATS_PER_ROW : seq % SEATS_PER_ROW;
        return String.format("%c%02d", row, number);
    }

    private String generateUniqueCode(String prefix, int digits) {
        String key = prefix;
        SequenceCounter sequence = sequenceRepo.findById(key)
                .orElse(new SequenceCounter(key, 0));

        int nextValue = sequence.getValue() + 1;
        if (nextValue > MAX_SEQUENCE) {
            nextValue = 1;
        }

        sequence.setValue(nextValue);
        sequenceRepo.save(sequence);

        return String.format("%s%0" + digits + "d", prefix, nextValue);
    }

    // In AutoGeneratedCode.java
    @Transactional
    public String generateLayoutSeatCode(String screenCode, String cinemaCode, String row, int number) {
        // Option B.1: Simple deterministic code (same as Option A)
        // return String.format("%s-%s-%s%d", cinemaCode, screenCode, row, number);

        // Option B.2: Use a single counter for the screen
        String key = "SEAT_LAYOUT_" + screenCode; // Counter per screen
        SequenceCounter sequence = sequenceRepo.findById(key)
                .orElseGet(() -> sequenceRepo.save(new SequenceCounter(key, 0))); // Ensure save if new

        int nextValue = sequence.getValue() + 1;
        sequence.setValue(nextValue);
        sequenceRepo.save(sequence);

        // Combine with known info for uniqueness/readability if desired
        return String.format("%s-%s-S%04d", cinemaCode, screenCode, nextValue);
        // Or maybe just return the sequence number if that's enough?
        // return String.format("S%04d", nextValue); // Less informative
    }
}