package com.cibook.bookingticket.service;

import com.cibook.bookingticket.model.Coupon;
import com.cibook.bookingticket.model.Coupon.CouponStatus;
import com.cibook.bookingticket.repository.CouponRepository;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageImpl;
import org.springframework.data.domain.Pageable;
import org.springframework.data.mongodb.core.MongoTemplate;
import org.springframework.data.mongodb.core.query.Criteria;
import org.springframework.data.mongodb.core.query.Query;
import org.springframework.stereotype.Service;
import org.webjars.NotFoundException;

import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.stream.Collectors;

@Slf4j
@Service
public class CouponService implements IService<Coupon, String> {

    private final CouponRepository couponRepository;
    private final MongoTemplate mongoTemplate;

    @Autowired
    public CouponService(CouponRepository couponRepository, AutoGeneratedCode codeGenerator,
            MongoTemplate mongoTemplate) {
        this.couponRepository = couponRepository;
        this.mongoTemplate = mongoTemplate;
    }

    @Override
    public Coupon add(Coupon entity) {
        if (couponRepository.findByCouponCode(entity.getCouponCode()).isPresent())
            throw new NotFoundException("Coupon code already exists.");
        entity.setStatus(CouponStatus.INACTIVE);
        entity.setUsage(0);
        System.out.println(entity);
        return couponRepository.save(entity);
    }

    @Override
    public Optional<Coupon> findById(String id) {
        return couponRepository.findById(id);
    }

    @Override
    public Optional<Coupon> findByCode(String code) {
        return couponRepository.findByCouponCode(code);
    }

    @Override
    public List<Coupon> findAll() {
        return couponRepository.findAll();
    }

    @Override
    public Page<Coupon> findAll(Pageable pageable) {
        return couponRepository.findAll(pageable);
    }

    @Override
    public Map<String, String> findAllNamesWithID() {
        return couponRepository.findAll().stream()
                .filter(coupon -> coupon.getCouponCode() != null && coupon.getDescription() != null)
                .collect(Collectors.toMap(
                        Coupon::getCouponCode,
                        Coupon::getDescription,
                        (existingValue, newValue) -> existingValue));
    }

    @Override
    public Coupon update(String id, Coupon entity) {
        Coupon coupon = findById(id).orElseThrow(() -> new NotFoundException("Coupon not found with ID: " + id));
        System.out.println(coupon);
        entity.setId(coupon.getId());
        return couponRepository.save(entity);
    }

    @Override
    public void deleteById(String id) {
        couponRepository.deleteById(id);
    }

    @Override
    public boolean existsById(String id) {
        return couponRepository.existsById(id);
    }

    public List<Coupon> addAll(List<Coupon> coupons) {
        return couponRepository.saveAll(coupons);
    }

    public void deleteAll() {
        couponRepository.deleteAll();
    }

    public void updateStatus(String id, String string) {
        Coupon coupon = findById(id).orElseThrow(() -> new NotFoundException("Coupon not found with ID: " + id));
        coupon.setStatus(CouponStatus.valueOf(string));
        couponRepository.save(coupon);
    }

    public Page<Coupon> findAllWithCriteria(Pageable pageable, String code, Double minPrice, Double maxPrice,
    String status, String type, String startDate, String endDate) {
        try {        
            Query query = new Query();
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
            if (code != null && !code.trim().isEmpty()) {
                query.addCriteria(Criteria.where("couponCode").regex(code, "i"));
            }
            if (minPrice != null && minPrice > 0) {
                query.addCriteria(Criteria.where("price").gte(minPrice));
            }
            if (maxPrice != null && maxPrice > 0) {
                query.addCriteria(Criteria.where("price").lte(maxPrice));
            }
            if (status != null && !status.trim().isEmpty()) {
                query.addCriteria(Criteria.where("status").is(status));
            }
            if (type != null && !type.trim().isEmpty()) {
                query.addCriteria(Criteria.where("type").is(type));
            }
            if (startDate != null && !startDate.trim().isEmpty()) {
                Date start = sdf.parse(startDate);
                query.addCriteria(Criteria.where("startDate").gte(start));
            }
            if (endDate != null && !endDate.trim().isEmpty()) {
                Date end = sdf.parse(endDate);
                query.addCriteria(Criteria.where("endDate").lte(end));
            }
            List<Coupon> results = mongoTemplate.find(query, Coupon.class);
            long count = mongoTemplate.count(query.skip(-1).limit(-1), Coupon.class);
            return new PageImpl<>(results, pageable, count);
        } catch (Exception e) {
            throw new NotFoundException("Error");
        }
    }
}