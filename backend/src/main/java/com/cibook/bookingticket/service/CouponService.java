package com.cibook.bookingticket.service;

import com.cibook.bookingticket.model.Coupon;
import com.cibook.bookingticket.repository.CouponRepository;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Optional;
import java.util.stream.Collectors;

@Slf4j
@Service
public class CouponService implements IService<Coupon, String> {

    private final CouponRepository couponRepository;

    @Autowired
    public CouponService(CouponRepository couponRepository, AutoGeneratedCode codeGenerator) {
        this.couponRepository = couponRepository;
    }

    @Override
    public Coupon add(Coupon entity) {
        return couponRepository.save(entity);
    }

    @Override
    public Optional<Coupon> findById(String id) {
        return couponRepository.findById(id);
    }

    @Override
    public Optional<Coupon> findByCode(String code) {
        return couponRepository.findByCouponCode(code);
    }

    @Override
    public List<Coupon> findAll() {
        return couponRepository.findAll();
    }

    @Override
    public Map<String, String> findAllNamesWithID() {
        return couponRepository.findAll().stream()
                .filter(coupon -> coupon.getCouponCode() != null && coupon.getDescription() != null)
                .collect(Collectors.toMap(
                        Coupon::getCouponCode,
                        Coupon::getDescription,
                        (existingValue, newValue) -> existingValue
                ));
    }

    @Override
    public Coupon update(String id, Coupon entity) {
        if (!existsById(id)) return null;
        Coupon coupon = couponRepository.findById(id).get();
        entity.setCouponCode(coupon.getCouponCode());
        return couponRepository.save(entity);
    }

    @Override
    public void deleteById(String id) {
        couponRepository.deleteById(id);
    }

    @Override
    public boolean existsById(String id) {
        return couponRepository.existsById(id);
    }

    public List<Coupon> addAll(List<Coupon> coupons) {
        return couponRepository.saveAll(coupons);
    }

    public void deleteAll() {
        couponRepository.deleteAll();
    }
}