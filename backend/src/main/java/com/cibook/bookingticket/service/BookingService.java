package com.cibook.bookingticket.service;

import com.cibook.bookingticket.dto.BookingAdminDto;
import com.cibook.bookingticket.dto.BookingRequestDto;
import com.cibook.bookingticket.model.*;
import com.cibook.bookingticket.model.Booking.BookingStatus;
import com.cibook.bookingticket.observer.NotificationSubject;
import com.cibook.bookingticket.repository.BookingDetailRepository;
import com.cibook.bookingticket.repository.BookingRepository;
import com.cibook.bookingticket.repository.PaymentRepository;
import com.cibook.bookingticket.repository.ShowtimeRepository;
import com.mongodb.client.AggregateIterable;
import com.mongodb.client.MongoCollection;

import lombok.extern.slf4j.Slf4j;

import org.bson.Document;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageImpl;
import org.springframework.data.domain.Pageable;
import org.springframework.data.mongodb.core.MongoTemplate;
import org.springframework.data.mongodb.core.query.Criteria;
import org.springframework.data.mongodb.core.query.Query;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.time.LocalDateTime;
import java.time.ZoneId;
import java.util.*;
import java.util.stream.Collectors;

@Slf4j
@Service
public class BookingService implements IService<Booking, String> {

    private final ShowtimeRepository showtimeRepository;
    private final BookingRepository bookingRepository;
    private final BookingDetailService bookingDetailService;
    private final NotificationSubject notificationSubject;
    private final AutoGeneratedCode codeGenerator;
    private final BookingDetailRepository bookingDetailRepository;
    private final PaymentRepository paymentRepository;
    private final ShowtimeService showtimeService;
    private final MovieService movieService;
    private final CinemaService cinemaService;
    private final CouponService couponService;
    private final SeatService seatService;
    private final MongoTemplate mongoTemplate;

    @Autowired
    public BookingService(BookingRepository bookingRepository, BookingDetailService bookingDetailService,
            NotificationSubject notificationSubject, AutoGeneratedCode codeGenerator,
            BookingDetailRepository bookingDetailRepository, BookingDetailRepository bookingDetailRepository1,
            PaymentRepository paymentRepository, ShowtimeService showtimeService, MovieService movieService,
            CinemaService cinemaService, CouponService couponService, SeatService seatService,
            ShowtimeRepository showtimeRepository, MongoTemplate mongoTemplate) {
        this.bookingRepository = bookingRepository;
        this.bookingDetailService = bookingDetailService;
        this.notificationSubject = notificationSubject;
        this.codeGenerator = codeGenerator;
        this.bookingDetailRepository = bookingDetailRepository1;
        this.paymentRepository = paymentRepository;
        this.showtimeService = showtimeService;
        this.movieService = movieService;
        this.cinemaService = cinemaService;
        this.couponService = couponService;
        this.seatService = seatService;
        this.showtimeRepository = showtimeRepository;
        this.mongoTemplate = mongoTemplate;
    }

    @Override
    public Booking add(Booking entity) {
        entity.setBookingCode(codeGenerator.generateBookingCode());
        return bookingRepository.save(entity);
    }

    @Transactional
    public Booking addWithDetail(BookingRequestDto dto) {
        Coupon coupon =  couponService.findByCode(dto.getCouponCode()).orElseThrow(() -> new NoSuchElementException("Coupon not found with code: " + dto.getCouponCode()));
        Double amount = dto.getTotalAmount();
        if (coupon.getType() == Coupon.CouponType.PERCENTAGE) {
            amount = dto.getTotalAmount() * (1 - coupon.getDiscountValue() / 100);
        } else if (coupon.getType() == Coupon.CouponType.FIXED) {
            amount = dto.getTotalAmount() - coupon.getDiscountValue();
        }

        // 1.Create booking
        Booking booking = Booking.builder()
                .bookingCode(codeGenerator.generateBookingCode())
                .userId(dto.getUserId())
                .totalAmount(amount)
                .showTimeCode(dto.getShowtimeId())
                .couponCode(dto.getCouponCode())
                .status(BookingStatus.PENDING)
                .build();
        booking = bookingRepository.save(booking);

        // 2. Update showtime booked seats
        Showtime showtime = showtimeService.findByCode(booking.getShowTimeCode()).orElseThrow();

        // 3. Create booking details
        Booking finalBooking = booking;
        // 3.1 Check seat availability
        System.out.println("Showtime: " + showtime);
        Map<String, Double> seatMultipliers = seatService.getMultipliersByCodes(dto.getSeats(),
                showtime.getScreenCode(), showtime.getCinemaCode());
        List<String> unavailableSeats = dto.getSeats().stream()
                .filter(seatId -> !seatMultipliers.containsKey(seatId))
                .toList();
        if (!unavailableSeats.isEmpty()) {
            throw new SeatUnavailableException("Booked seats: " + unavailableSeats);
        }

        showtime.setBookedSeats(showtime.getBookedSeats() + dto.getSeats().size());
        showtimeRepository.save(showtime);

        // 3.2 Create booking details
        List<BookingDetail> details = dto.getSeats().stream().map(seatId -> BookingDetail.builder()
                .bookingId(finalBooking.getId())
                .seatCode(seatId)
                .build()).toList();
        details = bookingDetailRepository.saveAll(details);

        // 4. Create payment
        Payment payment = Payment.builder()
                .paymentCode(codeGenerator.generatePaymentCode())
                .bookingID(booking.getId())
                .method(Payment.PaymentMethod.valueOf(dto.getPaymentMethod().toUpperCase()))
                .amount(dto.getTotalAmount())
                .owner(dto.getUserId())
                .build();
        payment = paymentRepository.save(payment);

        // 5. Update status seats
        seatService.updateSeatStatus(dto.getSeats(), showtime.getScreenCode(), showtime.getCinemaCode(), "PENDING");

        // 6. Send notification
        Movie movie = movieService.findByCode(showtime.getMovieCode()).orElseThrow();
        Cinema cinema = cinemaService.findByCode(showtime.getCinemaCode()).orElseThrow();
        Map<String, Object> data = new HashMap<>();
        data.put("Booking", booking);
        data.put("BookingDetail", details);
        data.put("Payment", payment);
        data.put("Showtime", showtime);
        data.put("Movie", movie);
        data.put("Cinema", cinema);
        if (coupon != null) {
            data.put("Coupon", coupon);
        }
        notificationSubject.notifyAll(
                Notification.NotificationType.BOOKING_CONFIRMATION,
                dto.getUserId(),
                "Xác nhận đặt vé!",
                "Vé của bạn đã được chúng tôi ghi nhận!",
                data);
        return finalBooking;
    }

    @Override
    public Optional<Booking> findById(String id) {
        return bookingRepository.findById(id);
    }

    @Override
    public Optional<Booking> findByCode(String code) {
        return bookingRepository.findByBookingCode(code);
    }

    @Override
    public List<Booking> findAll() {
        return bookingRepository.findAll();
    }

    @Override
    public Page<Booking> findAll(Pageable pageable) {
        log.info("BookingService: Finding all bookings(paginated)");
        return bookingRepository.findAll(pageable);
    }

    @Override
    public Map<String, String> findAllNamesWithID() {
        return bookingRepository.findAll().stream()
                .collect(Collectors.toMap(Booking::getId, Booking::getBookingCode));
    }

    @Override
    public Booking update(String id, Booking entity) {
        return bookingRepository.findById(id).map(existing -> {
            entity.setId(existing.getId());
            entity.setBookingCode(existing.getBookingCode());
            return bookingRepository.save(entity);
        }).orElseThrow(() -> new NoSuchElementException("Booking not found with ID: " + id));
    }

    @Override
    public void deleteById(String id) {
        if (bookingRepository.existsById(id)) {
            bookingRepository.deleteById(id);
        } else {
            throw new NoSuchElementException("Booking not found with ID: " + id);
        }
    }

    @Override
    public boolean existsById(String id) {
        return bookingRepository.existsById(id);
    }

    public List<Booking> addAll(List<Booking> entities) {
        entities.forEach(entity -> {
            entity.setBookingCode(codeGenerator.generateBookingCode());
        });
        return bookingRepository.saveAll(entities);
    }

    public void deleteAll() {
        bookingRepository.deleteAll();
    }

    public BookingDetail getBookingDetailById(String id) {
        return bookingDetailService.findById(id)
                .orElseThrow(() -> new NoSuchElementException("BookingDetail not found with ID: " + id));
    }

    public Page<BookingAdminDto> findAllBooking(Pageable pageable, String owner, String status, String movie) {
        MongoCollection<Document> collection = mongoTemplate.getCollection("bookings");

        List<Document> pipeline = new ArrayList<>();

        if (status != null && !status.isEmpty()) {
            pipeline.add(new Document("$match", new Document("status", status)));
        }
        if (owner != null && !owner.isEmpty()) {
            pipeline.add(new Document("$match", new Document("userId", owner)));
        }

        pipeline.addAll(Arrays.asList(
                new Document("$addFields",
                        new Document("bookingIdStr",
                                new Document("$toString", "$_id"))
                                .append("userObjStr",
                                        new Document("$toObjectId", "$userId"))),
                new Document("$lookup",
                        new Document("from", "booking_details")
                                .append("localField", "bookingIdStr")
                                .append("foreignField", "bookingId")
                                .append("as", "booking_details")),
                new Document("$lookup",
                        new Document("from", "showtimes")
                                .append("localField", "showTimeCode")
                                .append("foreignField", "showTimeCode")
                                .append("as", "showtimes")),
                new Document("$unwind",
                        new Document("path", "$showtimes")
                                .append("preserveNullAndEmptyArrays", true)),
                new Document("$lookup",
                        new Document("from", "movies")
                                .append("localField", "showtimes.movieCode")
                                .append("foreignField", "movieCode")
                                .append("as", "movies"))));

        if (movie != null && !movie.trim().isEmpty()) {
            pipeline.add(new Document("$match",
                    new Document("movies.title", new Document("$regex", ".*" + movie + ".*").append("$options", "i"))));
        }

        pipeline.addAll(Arrays.asList(
                new Document("$unwind",
                        new Document("path", "$movies")
                                .append("preserveNullAndEmptyArrays", true)),
                new Document("$lookup",
                        new Document("from", "users")
                                .append("localField", "userObjStr")
                                .append("foreignField", "_id")
                                .append("as", "user")),
                new Document("$unwind",
                        new Document("path", "$user")
                                .append("preserveNullAndEmptyArrays", true)),
                new Document("$sort",
                        new Document("createdAt", -1L)),
                new Document("$project",
                        new Document("bookingCode", 1L)
                                .append("createdAt", 1L)
                                .append("status", 1L)
                                .append("totalAmount", 1L)
                                .append("taxAmount", 1L)
                                .append("booking_details",
                                        new Document("$map",
                                                new Document("input", "$booking_details")
                                                        .append("as", "bd")
                                                        .append("in",
                                                                new Document("seatCode", "$$bd.seatCode")
                                                                        .append("price", "$$bd.price"))))
                                .append("user.name", 1L)
                                .append("user.email", 1L)
                                .append("user.phoneNumber", 1L)
                                .append("movies.title", 1L)
                                .append("movies.thumbnail", 1L)
                                .append("movies.duration", 1L)
                                .append("movies.genre", 1L)
                                .append("showtimes.startTime", 1L)
                                .append("showtimes.endTime", 1L)
                                .append("showtimes.screenCode", 1L)
                                .append("showtimes.cinemaCode", 1L)
                                .append("showtimes.owner", 1L))));

        List<Document> facetPipeline = new ArrayList<>();
        facetPipeline.add(new Document("$skip", pageable.getOffset()));
        facetPipeline.add(new Document("$limit", pageable.getPageSize()));

        List<Document> countPipeline = new ArrayList<>();
        countPipeline.add(new Document("$count", "total"));

        pipeline.add(new Document("$facet", new Document()
                .append("content", facetPipeline)
                .append("count", countPipeline)));

        AggregateIterable<Document> result = collection.aggregate(pipeline);
        Document resultDoc = result.first();

        List<Document> contentDocs = resultDoc.getList("content", Document.class);
        List<Document> countDocs = resultDoc.getList("count", Document.class);
        long total = countDocs.isEmpty() ? 0 : countDocs.get(0).getInteger("total");

        List<BookingAdminDto> content = new ArrayList<>();
        for (Document doc : contentDocs) {
            BookingAdminDto dto = mapDocumentToBookingAdminDto(doc);
            content.add(dto);
        }
        return new PageImpl<>(content, pageable, total);
    }

    private BookingAdminDto mapDocumentToBookingAdminDto(Document doc) {
        BookingAdminDto dto = new BookingAdminDto();

        dto.setBookingCode(doc.getString("bookingCode"));

        Date createdAtDate = doc.getDate("createdAt");
        if (createdAtDate != null) {
            dto.setCreatedAt(createdAtDate.toInstant()
                    .atZone(ZoneId.systemDefault())
                    .toLocalDateTime());
        }

        dto.setStatus(doc.getString("status"));
        dto.setTotalAmount(doc.getDouble("totalAmount"));
        dto.setTaxAmount(doc.getDouble("taxAmount"));

        // bookingDetails
        List<Document> bookingDetailsDocs = (List<Document>) doc.get("booking_details");
        if (bookingDetailsDocs != null) {
            List<BookingAdminDto.BookingDetailDto> bookingDetails = bookingDetailsDocs.stream().map(bdDoc -> {
                BookingAdminDto.BookingDetailDto bdDto = new BookingAdminDto.BookingDetailDto();
                bdDto.setSeatCode(bdDoc.getString("seatCode"));
                bdDto.setPrice(bdDoc.getDouble("price"));
                return bdDto;
            }).collect(Collectors.toList());
            dto.setBookingDetails(bookingDetails);
        }

        // user
        Document userDoc = (Document) doc.get("user");
        if (userDoc != null) {
            BookingAdminDto.UserDto userDto = new BookingAdminDto.UserDto();
            userDto.setName(userDoc.getString("name"));
            userDto.setEmail(userDoc.getString("email"));
            userDto.setPhoneNumber(userDoc.getString("phoneNumber"));
            dto.setUser(userDto);
        }

        // movie
        Document movieDoc = (Document) doc.get("movies");
        if (movieDoc != null) {
            BookingAdminDto.MovieDto movieDto = new BookingAdminDto.MovieDto();
            movieDto.setTitle(movieDoc.getString("title"));
            movieDto.setThumbnail(movieDoc.getString("thumbnail"));
            movieDto.setDuration(movieDoc.getInteger("duration"));

            // genre là List<String>
            List<String> genres = (List<String>) movieDoc.get("genre");
            movieDto.setGenre(genres);

            dto.setMovie(movieDto);
        }

        // showtime
        Document showtimeDoc = (Document) doc.get("showtimes");
        if (showtimeDoc != null) {
            BookingAdminDto.ShowtimeDto showtimeDto = new BookingAdminDto.ShowtimeDto();

            Date startDate = showtimeDoc.getDate("startTime");
            if (startDate != null) {
                showtimeDto.setStartTime(startDate.toInstant().atZone(ZoneId.systemDefault()).toLocalDateTime());
            }
            Date endDate = showtimeDoc.getDate("endTime");
            if (endDate != null) {
                showtimeDto.setEndTime(endDate.toInstant().atZone(ZoneId.systemDefault()).toLocalDateTime());
            }
            showtimeDto.setScreenCode(showtimeDoc.getString("screenCode"));
            showtimeDto.setCinemaCode(showtimeDoc.getString("cinemaCode"));
            showtimeDto.setOwner(showtimeDoc.getString("owner"));

            dto.setShowtime(showtimeDto);
        }

        return dto;
    }

    private int getTotalBookingThisMonth(LocalDateTime startMonth, LocalDateTime endMonth) {
        Query query = new Query(Criteria
                .where("createdAt").gte(Date.from(startMonth.atZone(ZoneId.systemDefault()).toInstant()))
                .lte(Date.from(endMonth.atZone(ZoneId.systemDefault()).toInstant()))
                .and("status").is("CONFIRMED"));
        return (int) mongoTemplate.count(query, "bookings");
    }

    private int getTotalBooking() {
        Query query = new Query(Criteria.where("status").is("CONFIRMED"));
        return (int) mongoTemplate.count(query, "bookings");
    }

    public Map<String, Integer> getOrderStatAMonth() {
        LocalDateTime now = LocalDateTime.now();
        return Map.of(
                "total", getTotalBooking(),
                "thisMonth", getTotalBookingThisMonth(now.withDayOfMonth(1), now),
                "lastMonth", getTotalBookingThisMonth(now.withDayOfMonth(1).minusMonths(1), now.minusMonths(1)));
    }
}
