package com.cibook.bookingticket.service;

import com.cibook.bookingticket.model.Booking;
import com.cibook.bookingticket.model.BookingDetail;
import com.cibook.bookingticket.model.Notification;
import com.cibook.bookingticket.observer.NotificationSubject;
import com.cibook.bookingticket.repository.BookingRepository;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import java.util.*;
import java.util.stream.Collectors;

@Slf4j
@Service
public class BookingService implements IService<Booking, String> {
    private final BookingRepository bookingRepository;
    private final BookingDetailService bookingDetailService;
    private final NotificationSubject notificationSubject;
    private final AutoGeneratedCode codeGenerator;

    @Autowired
    public BookingService(BookingRepository bookingRepository, BookingDetailService bookingDetailService, NotificationSubject notificationSubject, AutoGeneratedCode codeGenerator) {
        this.bookingRepository = bookingRepository;
        this.bookingDetailService = bookingDetailService;
        this.notificationSubject = notificationSubject;
        this.codeGenerator = codeGenerator;
    }

    @Override
    public Booking add(Booking entity) {
        entity.setBookingCode(codeGenerator.generateBookingCode());
        return bookingRepository.save(entity);
    }

    public void addWithDetail(Map<String, String> data) {
       data.forEach((key, value) -> {
           System.out.println("key: " + key + " value: " + value);
       });
    }


    @Override
    public Optional<Booking> findById(String id) {
        return bookingRepository.findById(id);
    }

    @Override
    public Optional<Booking> findByCode(String code) {
        return bookingRepository.findByBookingCode(code);
    }

    @Override
    public List<Booking> findAll() {
        return bookingRepository.findAll();
    }

    @Override
    public Page<Booking> findAll(Pageable pageable) {
        return bookingRepository.findAll(pageable);
    }

    @Override
    public Map<String, String> findAllNamesWithID() {
        return bookingRepository.findAll().stream()
                .collect(Collectors.toMap(Booking::getId, Booking::getBookingCode));
    }

    @Override
    public Booking update(String id, Booking entity) {
        return bookingRepository.findById(id).map(existing -> {
            entity.setId(existing.getId());
            entity.setBookingCode(existing.getBookingCode());
            return bookingRepository.save(entity);
        }).orElseThrow(() -> new NoSuchElementException("Booking not found with ID: " + id));
    }

    @Override
    public void deleteById(String id) {
        if (bookingRepository.existsById(id)) {
            bookingRepository.deleteById(id);
        } else {
            throw new NoSuchElementException("Booking not found with ID: " + id);
        }
    }

    @Override
    public boolean existsById(String id) {
        return bookingRepository.existsById(id);
    }

    public List<Booking> addAll(List<Booking> entities) {
        entities.forEach(entity -> {
            entity.setBookingCode(codeGenerator.generateBookingCode());
        });
        return bookingRepository.saveAll(entities);
    }

    public void deleteAll() {
        bookingRepository.deleteAll();
    }

    public List<BookingDetail> getDetailsById(String id) {
        return bookingDetailService.findByBookingId(id);
    }
}
