package com.cibook.bookingticket.service;

import com.cibook.bookingticket.dto.BookingRequestDto;
import com.cibook.bookingticket.model.*;
import com.cibook.bookingticket.model.Booking.BookingStatus;
import com.cibook.bookingticket.observer.NotificationSubject;
import com.cibook.bookingticket.repository.BookingDetailRepository;
import com.cibook.bookingticket.repository.BookingRepository;
import com.cibook.bookingticket.repository.PaymentRepository;
import com.cibook.bookingticket.repository.ShowtimeRepository;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.crossstore.ChangeSetPersister.NotFoundException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.*;
import java.util.stream.Collectors;

@Slf4j
@Service
public class BookingService implements IService<Booking, String> {

    private final ShowtimeRepository showtimeRepository;
    private final BookingRepository bookingRepository;
    private final BookingDetailService bookingDetailService;
    private final NotificationSubject notificationSubject;
    private final AutoGeneratedCode codeGenerator;
    private final BookingDetailRepository bookingDetailRepository;
    private final PaymentRepository paymentRepository;
    private final ShowtimeService showtimeService;
    private final MovieService movieService;
    private final CinemaService cinemaService;
    private final CouponService couponService;
    private final SeatService seatService;

    @Autowired
    public BookingService(BookingRepository bookingRepository, BookingDetailService bookingDetailService,
            NotificationSubject notificationSubject, AutoGeneratedCode codeGenerator,
            BookingDetailRepository bookingDetailRepository, BookingDetailRepository bookingDetailRepository1,
            PaymentRepository paymentRepository, ShowtimeService showtimeService, MovieService movieService,
            CinemaService cinemaService, CouponService couponService, SeatService seatService,
            ShowtimeRepository showtimeRepository) {
        this.bookingRepository = bookingRepository;
        this.bookingDetailService = bookingDetailService;
        this.notificationSubject = notificationSubject;
        this.codeGenerator = codeGenerator;
        this.bookingDetailRepository = bookingDetailRepository1;
        this.paymentRepository = paymentRepository;
        this.showtimeService = showtimeService;
        this.movieService = movieService;
        this.cinemaService = cinemaService;
        this.couponService = couponService;
        this.seatService = seatService;
        this.showtimeRepository = showtimeRepository;
    }

    @Override
    public Booking add(Booking entity) {
        entity.setBookingCode(codeGenerator.generateBookingCode());
        return bookingRepository.save(entity);
    }

    @Transactional
    public Booking addWithDetail(BookingRequestDto dto) {
        // 1.Create booking
        Booking booking = Booking.builder()
                .bookingCode(codeGenerator.generateBookingCode())
                .userId(dto.getUserId())
                .totalAmount(dto.getTotalAmount())
                .showTimeCode(dto.getShowtimeId())
                .couponCode(dto.getCouponCode())
                .status(BookingStatus.PENDING)
                .build();
        booking = bookingRepository.save(booking);

        // 2. Update showtime booked seats
        Showtime showtime = showtimeService.findByCode(booking.getShowTimeCode()).orElseThrow();
        showtime.setBookedSeats(showtime.getBookedSeats() + dto.getSeats().size());
        showtimeRepository.save(showtime);

        // 3. Create booking details
        Booking finalBooking = booking;
        // 3.1 Check seat availability
        Map<String, Double> seatMultipliers = seatService.getMultipliersByCodes(dto.getSeats(),
                showtime.getScreenCode(), showtime.getCinemaCode());
        List<String> unavailableSeats = dto.getSeats().stream()
                .filter(seatId -> !seatMultipliers.containsKey(seatId))
                .toList();
        if (!unavailableSeats.isEmpty()) {
            throw new SeatUnavailableException("Booked seats: " + unavailableSeats);
        }
        // 3.2 Create booking details
        List<BookingDetail> details = dto.getSeats().stream().map(seatId -> BookingDetail.builder()
                .bookingId(finalBooking.getId())
                .seatCode(seatId)
                .price(seatMultipliers.get(seatId) * showtime.getPrice())
                .build()).toList();
        details = bookingDetailRepository.saveAll(details);

        // 4. Create payment
        Payment payment = Payment.builder()
                .paymentCode(codeGenerator.generatePaymentCode())
                .bookingID(booking.getId())
                .method(Payment.PaymentMethod.valueOf(dto.getPaymentMethod().toUpperCase()))
                .build();
        payment = paymentRepository.save(payment);

        // 5. Update status seats
        seatService.updateSeatStatus(dto.getSeats(), showtime.getScreenCode(), showtime.getCinemaCode(), "PENDING");

        // 6. Send notification
        Movie movie = movieService.findByCode(showtime.getMovieCode()).orElseThrow();
        Cinema cinema = cinemaService.findByCode(showtime.getCinemaCode()).orElseThrow();
        Coupon coupon = couponService.findByCode(booking.getCouponCode()).orElse(null);
        Map<String, Object> data = new HashMap<>();
        data.put("Booking", booking);
        data.put("BookingDetail", details);
        data.put("Payment", payment);
        data.put("Showtime", showtime);
        data.put("Movie", movie);
        data.put("Cinema", cinema);
        if (coupon != null) {
            data.put("Coupon", coupon);
        }
        notificationSubject.notifyAll(
                Notification.NotificationType.BOOKING_CONFIRMATION,
                dto.getUserId(),
                "Xác nhận đặt vé!",
                "Vé của bạn đã được chúng tôi ghi nhận!",
                data);
        return finalBooking;
    }

    @Override
    public Optional<Booking> findById(String id) {
        return bookingRepository.findById(id);
    }

    @Override
    public Optional<Booking> findByCode(String code) {
        return bookingRepository.findByBookingCode(code);
    }

    @Override
    public List<Booking> findAll() {
        return bookingRepository.findAll();
    }

    @Override
    public Page<Booking> findAll(Pageable pageable) {
        log.info("BookingService: Finding all bookings(paginated)");
        return bookingRepository.findAll(pageable);
    }

    @Override
    public Map<String, String> findAllNamesWithID() {
        return bookingRepository.findAll().stream()
                .collect(Collectors.toMap(Booking::getId, Booking::getBookingCode));
    }

    @Override
    public Booking update(String id, Booking entity) {
        return bookingRepository.findById(id).map(existing -> {
            entity.setId(existing.getId());
            entity.setBookingCode(existing.getBookingCode());
            return bookingRepository.save(entity);
        }).orElseThrow(() -> new NoSuchElementException("Booking not found with ID: " + id));
    }

    @Override
    public void deleteById(String id) {
        if (bookingRepository.existsById(id)) {
            bookingRepository.deleteById(id);
        } else {
            throw new NoSuchElementException("Booking not found with ID: " + id);
        }
    }

    @Override
    public boolean existsById(String id) {
        return bookingRepository.existsById(id);
    }

    public List<Booking> addAll(List<Booking> entities) {
        entities.forEach(entity -> {
            entity.setBookingCode(codeGenerator.generateBookingCode());
        });
        return bookingRepository.saveAll(entities);
    }

    public void deleteAll() {
        bookingRepository.deleteAll();
    }

    public BookingDetail getBookingDetailById(String id) {
        return bookingDetailService.findById(id)
                .orElseThrow(() -> new NoSuchElementException("BookingDetail not found with ID: " + id));
    }

}
