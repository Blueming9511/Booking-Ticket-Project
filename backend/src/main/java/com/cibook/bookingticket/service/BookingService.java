package com.cibook.bookingticket.service;

import com.cibook.bookingticket.dto.BookingRequestDto;
import com.cibook.bookingticket.model.*;
import com.cibook.bookingticket.observer.NotificationSubject;
import com.cibook.bookingticket.repository.BookingDetailRepository;
import com.cibook.bookingticket.repository.BookingRepository;
import com.cibook.bookingticket.repository.PaymentRepository;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import java.util.*;
import java.util.stream.Collectors;

@Slf4j
@Service
public class BookingService implements IService<Booking, String> {
    private final BookingRepository bookingRepository;
    private final BookingDetailService bookingDetailService;
    private final NotificationSubject notificationSubject;
    private final AutoGeneratedCode codeGenerator;
    private final BookingDetailRepository bookingDetailRepository;
    private final PaymentRepository paymentRepository;
    private final ShowtimeService showtimeService;
    private final MovieService movieService;
    private final CinemaService cinemaService;
    private final CouponService couponService;
    private final SeatService seatService;

    @Autowired
    public BookingService(BookingRepository bookingRepository, BookingDetailService bookingDetailService, NotificationSubject notificationSubject, AutoGeneratedCode codeGenerator, BookingDetailRepository bookingDetailRepository, BookingDetailRepository bookingDetailRepository1, PaymentRepository paymentRepository, ShowtimeService showtimeService, MovieService movieService, CinemaService cinemaService, CouponService couponService, SeatService seatService) {
        this.bookingRepository = bookingRepository;
        this.bookingDetailService = bookingDetailService;
        this.notificationSubject = notificationSubject;
        this.codeGenerator = codeGenerator;
        this.bookingDetailRepository = bookingDetailRepository1;
        this.paymentRepository = paymentRepository;
        this.showtimeService = showtimeService;
        this.movieService = movieService;
        this.cinemaService = cinemaService;
        this.couponService = couponService;
        this.seatService = seatService;
    }

    @Override
    public Booking add(Booking entity) {
        entity.setBookingCode(codeGenerator.generateBookingCode());
        return bookingRepository.save(entity);
    }

    public void addWithDetail(BookingRequestDto dto) {
        Booking booking = Booking.builder()
                .bookingCode(codeGenerator.generateBookingCode())
                .userId(dto.getUserId())
                .totalAmount(dto.getTotalAmount())
                .showTimeCode(dto.getShowtimeId())
                .build();
        booking = bookingRepository.save(booking);

        Showtime showtime = showtimeService.findByCode(booking.getShowTimeCode()).orElseThrow();
        Booking finalBooking = booking;
        List<BookingDetail> details = dto.getSeats().stream().map(seatId ->
                BookingDetail.builder()
                        .bookingId(finalBooking.getId())
                        .seatCode(seatId)
                        .price(seatService.getPrice(seatId, showtime.getScreenCode(), showtime.getCinemaCode()))
                        .build()
        ).toList();
        details = bookingDetailRepository.saveAll(details);

        Payment payment = Payment.builder()
                .paymentCode(codeGenerator.generatePaymentCode())
                .bookingID(booking.getId())
                .method(Payment.PaymentMethod.valueOf(dto.getPaymentMethod().toUpperCase()))
                .build();

        payment = paymentRepository.save(payment);

        Movie movie = movieService.findByCode(showtime.getMovieCode()).orElseThrow();
        Cinema cinema = cinemaService.findByCode(showtime.getCinemaCode()).orElseThrow();
        Coupon coupon = couponService.findByCode(booking.getCouponCode()).orElseThrow();

        notificationSubject.notifyAll(
                Notification.NotificationType.BOOKING_CONFIRMATION,
                dto.getUserId(),
                "Xác nhận đặt vé!",
                "Vé của bạn đã được chúng tôi ghi nhận!",
                Map.of(
                        "Booking", booking,
                        "BookingDetail", details,
                        "Payment", payment,
                        "Showtime", showtime,
                        "Movie", movie,
                        "Cinema", cinema,
                        "Coupon", coupon
                )
        );
    }


    @Override
    public Optional<Booking> findById(String id) {
        return bookingRepository.findById(id);
    }

    @Override
    public Optional<Booking> findByCode(String code) {
        return bookingRepository.findByBookingCode(code);
    }

    @Override
    public List<Booking> findAll() {
        return bookingRepository.findAll();
    }

    @Override
    public Page<Booking> findAll(Pageable pageable) {
        log.info("BookingService: Finding all bookings(paginated)");
        return bookingRepository.findAll(pageable);
    }

    @Override
    public Map<String, String> findAllNamesWithID() {
        return bookingRepository.findAll().stream()
                .collect(Collectors.toMap(Booking::getId, Booking::getBookingCode));
    }

    @Override
    public Booking update(String id, Booking entity) {
        return bookingRepository.findById(id).map(existing -> {
            entity.setId(existing.getId());
            entity.setBookingCode(existing.getBookingCode());
            return bookingRepository.save(entity);
        }).orElseThrow(() -> new NoSuchElementException("Booking not found with ID: " + id));
    }

    @Override
    public void deleteById(String id) {
        if (bookingRepository.existsById(id)) {
            bookingRepository.deleteById(id);
        } else {
            throw new NoSuchElementException("Booking not found with ID: " + id);
        }
    }

    @Override
    public boolean existsById(String id) {
        return bookingRepository.existsById(id);
    }

    public List<Booking> addAll(List<Booking> entities) {
        entities.forEach(entity -> {
            entity.setBookingCode(codeGenerator.generateBookingCode());
        });
        return bookingRepository.saveAll(entities);
    }

    public void deleteAll() {
        bookingRepository.deleteAll();
    }

    public BookingDetail getBookingDetailById(String id) {
        return bookingDetailService.findById(id).orElseThrow(() -> new NoSuchElementException("BookingDetail not found with ID: " + id));
    }
}
