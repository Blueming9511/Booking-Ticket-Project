package com.cibook.bookingticket.service;

import com.cibook.bookingticket.model.Seat;
import com.cibook.bookingticket.repository.SeatRepository;
import com.mongodb.client.AggregateIterable;
import com.mongodb.client.MongoCollection;
import org.bson.Document;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.data.mongodb.core.MongoTemplate;
import org.springframework.data.mongodb.core.aggregation.Aggregation;
import org.springframework.data.mongodb.core.aggregation.AggregationResults;
import org.springframework.data.mongodb.core.query.Criteria;
import org.springframework.data.mongodb.core.query.Query;
import org.springframework.data.mongodb.core.query.Update;
import org.springframework.stereotype.Service;

import java.util.*;
import java.util.stream.Collectors;

@Service
public class SeatService implements IService<Seat, String> {
    private final SeatRepository seatRepository;
    private final AutoGeneratedCode codeGenerator;
    private final MongoTemplate mongoTemplate;

    @Autowired
    public SeatService(SeatRepository seatRepository, AutoGeneratedCode codeGenerator, MongoTemplate mongoTemplate) {
        this.seatRepository = seatRepository;
        this.codeGenerator = codeGenerator;
        this.mongoTemplate = mongoTemplate;
    }

    @Override
    public Seat add(Seat entity) {
        entity.setSeatCode(
                codeGenerator.generateSeatCode(entity.getScreenCode(), entity.getCinemaCode(), entity.getRow()));
        Map<String, Double> multipliers = Map.of(
                "STANDARD", 1.0,
                "COUPLE", 2.2,
                "VIP", 1.5);
        entity.setMultiplier(multipliers.get(String.valueOf(entity.getType())));
        return seatRepository.save(entity);
    }

    @Override
    public Optional<Seat> findById(String id) {
        return seatRepository.findById(id);
    }

    @Override
    public Optional<Seat> findByCode(String id) {
        return seatRepository.findBySeatCode(id);
    }

    @Override
    public List<Seat> findAll() {
        return seatRepository.findAll();
    }

    @Override
    public Page<Seat> findAll(Pageable pageable) {
        return seatRepository.findAll(pageable);
    }

    public List<Seat> findAll(String screenCode, String cinemaCode, String row) {
        MongoCollection<Document> collection = mongoTemplate.getDb().getCollection("seats");

        Document match = new Document();
        if (screenCode != null)
            match.append("screenCode", screenCode);
        if (cinemaCode != null)
            match.append("cinemaCode", cinemaCode);
        if (row != null)
            match.append("row", row);

        AggregateIterable<Document> results = collection.aggregate(List.of(
                new Document("$match", match)));

        List<Seat> seats = new ArrayList<>();
        for (Document doc : results) {
            Seat seat = mongoTemplate.getConverter().read(Seat.class, doc);
            seats.add(seat);
        }

        return seats;
    }

    @Override
    public Map<String, String> findAllNamesWithID() {
        return null;
    }

    @Override
    public Seat update(String id, Seat entity) {
        if (!existsById(id))
            return null;
        Seat seat = seatRepository.findById(id).get();
        entity.setSeatCode(seat.getSeatCode());
        entity.setId(seat.getId());
        return seatRepository.save(entity);
    }

    @Override
    public void deleteById(String id) {
        seatRepository.deleteById(id);
    }

    @Override
    public boolean existsById(String id) {
        return seatRepository.existsById(id);
    }

    public List<Seat> addAll(List<Seat> seats) {
        Map<String, Double> multipliers = Map.of(
                "STANDARD", 1.0,
                "COUPLE", 2.2,
                "VIP", 1.5);
        seats.forEach(seat -> {
            System.out.println(seat.getRow());
        });
        seats.forEach(seat -> {
            seat.setMultiplier(multipliers.get(String.valueOf(seat.getType())));
        });
        return seatRepository.saveAll(seats);
    }

    public void deleteAll() {
        seatRepository.deleteAll();
    }

    public void deleteByScreenAndCinema(String cinemaCode, String screenCode) {
        seatRepository.deleteAllByCinemaCodeAndScreenCode(cinemaCode, screenCode);
    }

    public Double getMultiplierByCode(String code, String screenCode, String cinemaCode) {
        Query query = new Query();
        query.addCriteria(
                Criteria.where("seatCode").is(code)
                        .and("cinemaCode").is(cinemaCode)
                        .and("screenCode").is(screenCode));
        query.fields().include("multiplier").exclude("_id");
        Document result = mongoTemplate.findOne(query, Document.class, "seats");
        return result.getDouble("multiplier");
    }

    public Map<String, Double> getMultipliersByCodes(List<String> seats, String screenCode,
            String cinemaCode) {
        Query query = new Query();
        query.addCriteria(
                Criteria.where("seatCode").in(seats)
                        .and("cinemaCode").is(cinemaCode)
                        .and("screenCode").is(screenCode));
        query.fields().include("seatCode", "multiplier").exclude("_id");
        List<Document> resultList = mongoTemplate.find(query, Document.class, "seats");
        
        return resultList.stream().collect(Collectors.toMap(
                doc -> doc.getString("seatCode"),
                doc -> doc.getDouble("multiplier")));
    }

    public void updateSeatStatus(List<String> seatCodes, String screenCode, String cinemaCode, String newStatus) {
        Query query = new Query(Criteria.where("seatCode").in(seatCodes)
                .and("screenCode").is(screenCode)
                .and("cinemaCode").is(cinemaCode));
        Update update = new Update().set("status", newStatus);
        mongoTemplate.updateMulti(query, update, "seats");
    }

}
