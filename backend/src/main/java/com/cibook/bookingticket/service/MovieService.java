package com.cibook.bookingticket.service;

import com.cibook.bookingticket.model.Movie;
import com.cibook.bookingticket.repository.MovieRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.stream.Collectors;

@Service
public class MovieService implements IService<Movie, String> {
    private final MovieRepository movieRepository;
    private final AutoGeneratedCode codeGenerator;

    @Autowired
    public MovieService(MovieRepository movieRepository, AutoGeneratedCode codeGenerator) {
        this.movieRepository = movieRepository;
        this.codeGenerator = codeGenerator;
    }

    @Override
    public Movie add(Movie entity) {
        entity.setMovieCode(codeGenerator.generateMovieCode());
        return movieRepository.save(entity);
    }

    @Override
    public Optional<Movie> findById(String id) {
        return movieRepository.findById(id);
    }

    @Override
    public Optional<Movie> findByCode(String id) {
        return movieRepository.findByMovieCode(id);
    }

    @Override
    public List<Movie> findAll() {
        return movieRepository.findAll().stream()
                .map(this::normalizeMovieStatus)
                .collect(Collectors.toList());
    }

    @Override
    public Page<Movie> findAll(Pageable pageable) {
        return movieRepository.findAll(pageable);
    }

    private Movie normalizeMovieStatus(Movie movie) {
        if (movie.getStatus() != null) {
            String normalizedStatus = movie.getStatus();
            switch (normalizedStatus) {
                case "ended":
                    movie.setStatus("ENDED");
                    break;
                case "comming soon":
                    movie.setStatus("COMMING_SOON");
                    break;
                case "now showing":
                    movie.setStatus("NOW_SHOWING");
                    break;
                default:
                    break;
            }
        }
        return movieRepository.save(movie);
    }

    @Override
    public Map<String, String> findAllNamesWithID() {
        return findAll().stream().filter(movie -> movie.getMovieCode() != null).collect(Collectors.toMap(Movie::getMovieCode, Movie::getTitle, (o1, o2) -> o2));
    }

    @Override
    public Movie update(String id, Movie entity) {
        if (!existsById(id)) return null;
        Movie movie = movieRepository.findById(id).get();
        entity.setMovieCode(movie.getMovieCode());
        entity.setId(movie.getId());
        return movieRepository.save(entity);
    }

    @Override
    public void deleteById(String id) {
        movieRepository.deleteById(id);
    }

    @Override
    public boolean existsById(String id) {
        return movieRepository.existsById(id);
    }
}
