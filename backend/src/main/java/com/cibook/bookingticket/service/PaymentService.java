package com.cibook.bookingticket.service;

import com.cibook.bookingticket.model.Payment;
import com.cibook.bookingticket.repository.PaymentRepository;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.Map;
import java.util.Optional;

@Slf4j
@Service
public class PaymentService implements IService<Payment, String> {
    private final PaymentRepository paymentRepository;
    private final AutoGeneratedCode codeGenerator;

    @Autowired
    public PaymentService(PaymentRepository paymentRepository, AutoGeneratedCode codeGenerator) {
        this.paymentRepository = paymentRepository;
        this.codeGenerator = codeGenerator;
    }

    @Override
    public Payment add(Payment entity) {
        entity.setPaymentCode(codeGenerator.generatePaymentCode());
        return paymentRepository.save(entity);
    }

    @Override
    public Optional<Payment> findById(String id) {
        return paymentRepository.findById(id);
    }

    @Override
    public Optional<Payment> findByCode(String id) {
        return paymentRepository.findByPaymentCode(id);
    }

    @Override
    public List<Payment> findAll() {
        return paymentRepository.findAll();
    }

    @Override
    public Page<Payment> findAll(Pageable pageable) {
        return paymentRepository.findAll(pageable);
    }

    @Override
    public Map<String, String> findAllNamesWithID() {
        return null;
    }

    @Override
    public Payment update(String id, Payment entity) {
        Payment payment = paymentRepository.findById(id).orElse(null);
        entity.setId(id);
        entity.setPaymentCode(payment.getPaymentCode());
        return paymentRepository.save(entity);
    }

    @Override
    public void deleteById(String id) {
        paymentRepository.deleteById(id);
    }

    @Override
    public boolean existsById(String id) {
        return paymentRepository.existsById(id);
    }

    public List<Payment> addAll(List<Payment> payments) {
        payments.stream().forEach(payment -> payment.setPaymentCode(codeGenerator.generatePaymentCode()));
        return paymentRepository.saveAll(payments);
    }

    public void deleteAll() {
        paymentRepository.deleteAll();
    }
}
