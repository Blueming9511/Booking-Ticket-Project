package com.cibook.bookingticket.controller;

import com.cibook.bookingticket.model.Cinema;
import com.cibook.bookingticket.service.AutoGeneratedCode;
import com.cibook.bookingticket.service.CinemaService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.Map;

@RestController
@RequestMapping("/api/cinemas")
public class CinemaController implements IController<Cinema, String> {
    private final CinemaService cinemaService;
    private final AutoGeneratedCode codeGenerator;

    @Autowired
    public CinemaController(CinemaService cinemaService, AutoGeneratedCode codeGenerator) {
        this.cinemaService = cinemaService;
        this.codeGenerator = codeGenerator;
    }

    @Override
    public ResponseEntity<Cinema> add(Cinema entity) {
        return ResponseEntity.ok(cinemaService.add(entity));
    }

    @Override
    public ResponseEntity<Page<Cinema>> getAll(int page, int size) {
        Pageable pageable = PageRequest.of(page, size, Sort.by("cinemaCode").ascending());
        Page<Cinema> cinemas = cinemaService.findAll(pageable);
        return ResponseEntity.ok(cinemas);
    }

    @Override
    public ResponseEntity<Cinema> getById(String id) {
        return cinemaService.findById(id).map(ResponseEntity::ok).orElse(ResponseEntity.notFound().build());
    }

    @Override
    public ResponseEntity<Map<String, String>> getAllNames() {
        return ResponseEntity.ok(cinemaService.findAllNamesWithID());
    }

    @Override
    public ResponseEntity<Cinema> update(String id, @RequestBody Cinema entity) {
        return ResponseEntity.ok(cinemaService.update(id, entity));
    }

    @Override
    public ResponseEntity<Void> delete(String id) {
        if (!cinemaService.existsById(id)) {
            return ResponseEntity.notFound().build();
        }
        cinemaService.deleteById(id);
        return ResponseEntity.ok().build();
    }

    @GetMapping("/code/{id}")
    public ResponseEntity<Cinema> getByCode(@PathVariable("id") String id) {
        return cinemaService.findByCode(id).map(ResponseEntity::ok).orElse(ResponseEntity.notFound().build());
    }


}